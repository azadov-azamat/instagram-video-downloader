#!/usr/bin/env node

require('dotenv').config({ silent: true });

const app = require('../app');
const http = require('http');
const bot = require("../bot");
const debug = require('debug')('www');
const server = http.createServer(app);

const port = process.env.PORT || 8080;

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.listen(port, function () {
  if (process.env.NODE_ENV === 'production') {
    bot.telegram.setWebhook(`${process.env.BACK_HOST_NAME}/api/webhook_telegram`);
  } else {
    console.log("tushdi")
    bot.launch();
  }

  debug('Express server listening on port ' + server.address().port);
});

server.on('error', onError);

// Enable graceful stop
const shutdown = async (val) => {
  console.log('Shutting down gracefully...');

  try {
    await bot.stop(val);
    // Deregister the webhook to stop receiving updates
    await bot.telegram.deleteWebhook();

    console.log('Webhook deregistered and bot shutdown gracefully.');
    server.close(() => {
      process.exit(0);
    });
  } catch (error) {
    console.error('Error during shutdown:', error);
    process.exit(1);
  }
};

process.on('SIGINT', () => shutdown('SIGINT'));
process.on('SIGTERM', () => shutdown('SIGTERM'));

console.log(`Listening on port: ${port}`);
